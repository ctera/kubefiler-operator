/*
 * CTERA Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cteraopenapi

import (
	"encoding/json"
)

// NFSv3AccessControlEntry struct for NFSv3AccessControlEntry
type NFSv3AccessControlEntry struct {
	Address string         `json:"address"`
	Netmask string         `json:"netmask"`
	Perm    FileAccessMode `json:"perm"`
}

// NewNFSv3AccessControlEntry instantiates a new NFSv3AccessControlEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNFSv3AccessControlEntry(address string, netmask string, perm FileAccessMode) *NFSv3AccessControlEntry {
	this := NFSv3AccessControlEntry{}
	this.Address = address
	this.Netmask = netmask
	this.Perm = perm
	return &this
}

// NewNFSv3AccessControlEntryWithDefaults instantiates a new NFSv3AccessControlEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNFSv3AccessControlEntryWithDefaults() *NFSv3AccessControlEntry {
	this := NFSv3AccessControlEntry{}
	return &this
}

// GetAddress returns the Address field value
func (o *NFSv3AccessControlEntry) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *NFSv3AccessControlEntry) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *NFSv3AccessControlEntry) SetAddress(v string) {
	o.Address = v
}

// GetNetmask returns the Netmask field value
func (o *NFSv3AccessControlEntry) GetNetmask() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value
// and a boolean to check if the value has been set.
func (o *NFSv3AccessControlEntry) GetNetmaskOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Netmask, true
}

// SetNetmask sets field value
func (o *NFSv3AccessControlEntry) SetNetmask(v string) {
	o.Netmask = v
}

// GetPerm returns the Perm field value
func (o *NFSv3AccessControlEntry) GetPerm() FileAccessMode {
	if o == nil {
		var ret FileAccessMode
		return ret
	}

	return o.Perm
}

// GetPermOk returns a tuple with the Perm field value
// and a boolean to check if the value has been set.
func (o *NFSv3AccessControlEntry) GetPermOk() (*FileAccessMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Perm, true
}

// SetPerm sets field value
func (o *NFSv3AccessControlEntry) SetPerm(v FileAccessMode) {
	o.Perm = v
}

func (o NFSv3AccessControlEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["address"] = o.Address
	}
	if true {
		toSerialize["netmask"] = o.Netmask
	}
	if true {
		toSerialize["perm"] = o.Perm
	}
	return json.Marshal(toSerialize)
}

type NullableNFSv3AccessControlEntry struct {
	value *NFSv3AccessControlEntry
	isSet bool
}

func (v NullableNFSv3AccessControlEntry) Get() *NFSv3AccessControlEntry {
	return v.value
}

func (v *NullableNFSv3AccessControlEntry) Set(val *NFSv3AccessControlEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableNFSv3AccessControlEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableNFSv3AccessControlEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNFSv3AccessControlEntry(val *NFSv3AccessControlEntry) *NullableNFSv3AccessControlEntry {
	return &NullableNFSv3AccessControlEntry{value: val, isSet: true}
}

func (v NullableNFSv3AccessControlEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNFSv3AccessControlEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
