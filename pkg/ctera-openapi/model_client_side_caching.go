/*
 * CTERA Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cteraopenapi

import (
	"encoding/json"
	"fmt"
)

// ClientSideCaching the model 'ClientSideCaching'
type ClientSideCaching string

// List of ClientSideCaching
const (
	MANUAL    ClientSideCaching = "Manual"
	DOCUMENTS ClientSideCaching = "Documents"
	DISABLED  ClientSideCaching = "Disabled"
)

var allowedClientSideCachingEnumValues = []ClientSideCaching{
	"Manual",
	"Documents",
	"Disabled",
}

func (v *ClientSideCaching) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClientSideCaching(value)
	for _, existing := range allowedClientSideCachingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClientSideCaching", value)
}

// NewClientSideCachingFromValue returns a pointer to a valid ClientSideCaching
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClientSideCachingFromValue(v string) (*ClientSideCaching, error) {
	ev := ClientSideCaching(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClientSideCaching: valid values are %v", v, allowedClientSideCachingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClientSideCaching) IsValid() bool {
	for _, existing := range allowedClientSideCachingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClientSideCaching value
func (v ClientSideCaching) Ptr() *ClientSideCaching {
	return &v
}

type NullableClientSideCaching struct {
	value *ClientSideCaching
	isSet bool
}

func (v NullableClientSideCaching) Get() *ClientSideCaching {
	return v.value
}

func (v *NullableClientSideCaching) Set(val *ClientSideCaching) {
	v.value = val
	v.isSet = true
}

func (v NullableClientSideCaching) IsSet() bool {
	return v.isSet
}

func (v *NullableClientSideCaching) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientSideCaching(val *ClientSideCaching) *NullableClientSideCaching {
	return &NullableClientSideCaching{value: val, isSet: true}
}

func (v NullableClientSideCaching) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientSideCaching) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
