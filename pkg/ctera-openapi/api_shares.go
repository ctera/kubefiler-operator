/*
 * CTERA Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cteraopenapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// SharesApiService SharesApi service
type SharesApiService service

type ApiCteraGatewayOpenapiApiSharesAddAclRequest struct {
	ctx                     _context.Context
	ApiService              *SharesApiService
	name                    string
	shareAccessControlEntry *[]ShareAccessControlEntry
}

func (r ApiCteraGatewayOpenapiApiSharesAddAclRequest) ShareAccessControlEntry(shareAccessControlEntry []ShareAccessControlEntry) ApiCteraGatewayOpenapiApiSharesAddAclRequest {
	r.shareAccessControlEntry = &shareAccessControlEntry
	return r
}

func (r ApiCteraGatewayOpenapiApiSharesAddAclRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CteraGatewayOpenapiApiSharesAddAclExecute(r)
}

/*
 * CteraGatewayOpenapiApiSharesAddAcl Add the ACLs of the share
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name The name of the share
 * @return ApiCteraGatewayOpenapiApiSharesAddAclRequest
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesAddAcl(ctx _context.Context, name string) ApiCteraGatewayOpenapiApiSharesAddAclRequest {
	return ApiCteraGatewayOpenapiApiSharesAddAclRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

/*
 * Execute executes the request
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesAddAclExecute(r ApiCteraGatewayOpenapiApiSharesAddAclRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesApiService.CteraGatewayOpenapiApiSharesAddAcl")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{name}/acl"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.shareAccessControlEntry
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorMessage
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCteraGatewayOpenapiApiSharesAddScreenedFileTypesRequest struct {
	ctx         _context.Context
	ApiService  *SharesApiService
	name        string
	requestBody *[]string
}

func (r ApiCteraGatewayOpenapiApiSharesAddScreenedFileTypesRequest) RequestBody(requestBody []string) ApiCteraGatewayOpenapiApiSharesAddScreenedFileTypesRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiCteraGatewayOpenapiApiSharesAddScreenedFileTypesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CteraGatewayOpenapiApiSharesAddScreenedFileTypesExecute(r)
}

/*
 * CteraGatewayOpenapiApiSharesAddScreenedFileTypes Add to the screened files types of the share
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name The name of the share
 * @return ApiCteraGatewayOpenapiApiSharesAddScreenedFileTypesRequest
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesAddScreenedFileTypes(ctx _context.Context, name string) ApiCteraGatewayOpenapiApiSharesAddScreenedFileTypesRequest {
	return ApiCteraGatewayOpenapiApiSharesAddScreenedFileTypesRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

/*
 * Execute executes the request
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesAddScreenedFileTypesExecute(r ApiCteraGatewayOpenapiApiSharesAddScreenedFileTypesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesApiService.CteraGatewayOpenapiApiSharesAddScreenedFileTypes")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{name}/screened_file_types"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorMessage
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCteraGatewayOpenapiApiSharesAddTrustedNfsClientsRequest struct {
	ctx                     _context.Context
	ApiService              *SharesApiService
	name                    string
	nFSv3AccessControlEntry *[]NFSv3AccessControlEntry
}

func (r ApiCteraGatewayOpenapiApiSharesAddTrustedNfsClientsRequest) NFSv3AccessControlEntry(nFSv3AccessControlEntry []NFSv3AccessControlEntry) ApiCteraGatewayOpenapiApiSharesAddTrustedNfsClientsRequest {
	r.nFSv3AccessControlEntry = &nFSv3AccessControlEntry
	return r
}

func (r ApiCteraGatewayOpenapiApiSharesAddTrustedNfsClientsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CteraGatewayOpenapiApiSharesAddTrustedNfsClientsExecute(r)
}

/*
 * CteraGatewayOpenapiApiSharesAddTrustedNfsClients Add the Trusted NFS Clients of the share
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name The name of the share
 * @return ApiCteraGatewayOpenapiApiSharesAddTrustedNfsClientsRequest
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesAddTrustedNfsClients(ctx _context.Context, name string) ApiCteraGatewayOpenapiApiSharesAddTrustedNfsClientsRequest {
	return ApiCteraGatewayOpenapiApiSharesAddTrustedNfsClientsRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

/*
 * Execute executes the request
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesAddTrustedNfsClientsExecute(r ApiCteraGatewayOpenapiApiSharesAddTrustedNfsClientsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesApiService.CteraGatewayOpenapiApiSharesAddTrustedNfsClients")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{name}/trusted_nfs_clients"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nFSv3AccessControlEntry
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorMessage
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCteraGatewayOpenapiApiSharesGetAclRequest struct {
	ctx        _context.Context
	ApiService *SharesApiService
	name       string
}

func (r ApiCteraGatewayOpenapiApiSharesGetAclRequest) Execute() ([][]ShareAccessControlEntry, *_nethttp.Response, error) {
	return r.ApiService.CteraGatewayOpenapiApiSharesGetAclExecute(r)
}

/*
 * CteraGatewayOpenapiApiSharesGetAcl List the ACLs of the share
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name The name of the share
 * @return ApiCteraGatewayOpenapiApiSharesGetAclRequest
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesGetAcl(ctx _context.Context, name string) ApiCteraGatewayOpenapiApiSharesGetAclRequest {
	return ApiCteraGatewayOpenapiApiSharesGetAclRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

/*
 * Execute executes the request
 * @return [][]ShareAccessControlEntry
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesGetAclExecute(r ApiCteraGatewayOpenapiApiSharesGetAclRequest) ([][]ShareAccessControlEntry, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  [][]ShareAccessControlEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesApiService.CteraGatewayOpenapiApiSharesGetAcl")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{name}/acl"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorMessage
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCteraGatewayOpenapiApiSharesGetScreenedFileTypesRequest struct {
	ctx        _context.Context
	ApiService *SharesApiService
	name       string
}

func (r ApiCteraGatewayOpenapiApiSharesGetScreenedFileTypesRequest) Execute() ([]string, *_nethttp.Response, error) {
	return r.ApiService.CteraGatewayOpenapiApiSharesGetScreenedFileTypesExecute(r)
}

/*
 * CteraGatewayOpenapiApiSharesGetScreenedFileTypes List the screened file types of the share
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name The name of the share
 * @return ApiCteraGatewayOpenapiApiSharesGetScreenedFileTypesRequest
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesGetScreenedFileTypes(ctx _context.Context, name string) ApiCteraGatewayOpenapiApiSharesGetScreenedFileTypesRequest {
	return ApiCteraGatewayOpenapiApiSharesGetScreenedFileTypesRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

/*
 * Execute executes the request
 * @return []string
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesGetScreenedFileTypesExecute(r ApiCteraGatewayOpenapiApiSharesGetScreenedFileTypesRequest) ([]string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesApiService.CteraGatewayOpenapiApiSharesGetScreenedFileTypes")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{name}/screened_file_types"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorMessage
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCteraGatewayOpenapiApiSharesGetTrustedNfsClientsRequest struct {
	ctx        _context.Context
	ApiService *SharesApiService
	name       string
}

func (r ApiCteraGatewayOpenapiApiSharesGetTrustedNfsClientsRequest) Execute() ([][]NFSv3AccessControlEntry, *_nethttp.Response, error) {
	return r.ApiService.CteraGatewayOpenapiApiSharesGetTrustedNfsClientsExecute(r)
}

/*
 * CteraGatewayOpenapiApiSharesGetTrustedNfsClients List the Trusted NFS Clients of the share
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name The name of the share
 * @return ApiCteraGatewayOpenapiApiSharesGetTrustedNfsClientsRequest
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesGetTrustedNfsClients(ctx _context.Context, name string) ApiCteraGatewayOpenapiApiSharesGetTrustedNfsClientsRequest {
	return ApiCteraGatewayOpenapiApiSharesGetTrustedNfsClientsRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

/*
 * Execute executes the request
 * @return [][]NFSv3AccessControlEntry
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesGetTrustedNfsClientsExecute(r ApiCteraGatewayOpenapiApiSharesGetTrustedNfsClientsRequest) ([][]NFSv3AccessControlEntry, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  [][]NFSv3AccessControlEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesApiService.CteraGatewayOpenapiApiSharesGetTrustedNfsClients")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{name}/trusted_nfs_clients"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorMessage
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCteraGatewayOpenapiApiSharesRemoveAclRequest struct {
	ctx           _context.Context
	ApiService    *SharesApiService
	name          string
	principalType *PrincipalType
	principalName *string
}

func (r ApiCteraGatewayOpenapiApiSharesRemoveAclRequest) PrincipalType(principalType PrincipalType) ApiCteraGatewayOpenapiApiSharesRemoveAclRequest {
	r.principalType = &principalType
	return r
}
func (r ApiCteraGatewayOpenapiApiSharesRemoveAclRequest) PrincipalName(principalName string) ApiCteraGatewayOpenapiApiSharesRemoveAclRequest {
	r.principalName = &principalName
	return r
}

func (r ApiCteraGatewayOpenapiApiSharesRemoveAclRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CteraGatewayOpenapiApiSharesRemoveAclExecute(r)
}

/*
 * CteraGatewayOpenapiApiSharesRemoveAcl Remove the ACL of the share
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name The name of the share
 * @return ApiCteraGatewayOpenapiApiSharesRemoveAclRequest
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesRemoveAcl(ctx _context.Context, name string) ApiCteraGatewayOpenapiApiSharesRemoveAclRequest {
	return ApiCteraGatewayOpenapiApiSharesRemoveAclRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

/*
 * Execute executes the request
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesRemoveAclExecute(r ApiCteraGatewayOpenapiApiSharesRemoveAclRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesApiService.CteraGatewayOpenapiApiSharesRemoveAcl")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{name}/acl"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.principalType != nil {
		localVarQueryParams.Add("principal_type", parameterToString(*r.principalType, ""))
	}
	if r.principalName != nil {
		localVarQueryParams.Add("principal_name", parameterToString(*r.principalName, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorMessage
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCteraGatewayOpenapiApiSharesRemoveScreenedFileTypeRequest struct {
	ctx        _context.Context
	ApiService *SharesApiService
	name       string
	fileType   *string
}

func (r ApiCteraGatewayOpenapiApiSharesRemoveScreenedFileTypeRequest) FileType(fileType string) ApiCteraGatewayOpenapiApiSharesRemoveScreenedFileTypeRequest {
	r.fileType = &fileType
	return r
}

func (r ApiCteraGatewayOpenapiApiSharesRemoveScreenedFileTypeRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CteraGatewayOpenapiApiSharesRemoveScreenedFileTypeExecute(r)
}

/*
 * CteraGatewayOpenapiApiSharesRemoveScreenedFileType Remove from the screened file type of the share
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name The name of the share
 * @return ApiCteraGatewayOpenapiApiSharesRemoveScreenedFileTypeRequest
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesRemoveScreenedFileType(ctx _context.Context, name string) ApiCteraGatewayOpenapiApiSharesRemoveScreenedFileTypeRequest {
	return ApiCteraGatewayOpenapiApiSharesRemoveScreenedFileTypeRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

/*
 * Execute executes the request
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesRemoveScreenedFileTypeExecute(r ApiCteraGatewayOpenapiApiSharesRemoveScreenedFileTypeRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesApiService.CteraGatewayOpenapiApiSharesRemoveScreenedFileType")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{name}/screened_file_types"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fileType != nil {
		localVarQueryParams.Add("file_type", parameterToString(*r.fileType, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorMessage
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCteraGatewayOpenapiApiSharesRemoveTrustedNfsClientRequest struct {
	ctx        _context.Context
	ApiService *SharesApiService
	name       string
	address    *string
	netmask    *string
}

func (r ApiCteraGatewayOpenapiApiSharesRemoveTrustedNfsClientRequest) Address(address string) ApiCteraGatewayOpenapiApiSharesRemoveTrustedNfsClientRequest {
	r.address = &address
	return r
}
func (r ApiCteraGatewayOpenapiApiSharesRemoveTrustedNfsClientRequest) Netmask(netmask string) ApiCteraGatewayOpenapiApiSharesRemoveTrustedNfsClientRequest {
	r.netmask = &netmask
	return r
}

func (r ApiCteraGatewayOpenapiApiSharesRemoveTrustedNfsClientRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CteraGatewayOpenapiApiSharesRemoveTrustedNfsClientExecute(r)
}

/*
 * CteraGatewayOpenapiApiSharesRemoveTrustedNfsClient Remove the Trusted NFS Client of the share
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name The name of the share
 * @return ApiCteraGatewayOpenapiApiSharesRemoveTrustedNfsClientRequest
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesRemoveTrustedNfsClient(ctx _context.Context, name string) ApiCteraGatewayOpenapiApiSharesRemoveTrustedNfsClientRequest {
	return ApiCteraGatewayOpenapiApiSharesRemoveTrustedNfsClientRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

/*
 * Execute executes the request
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesRemoveTrustedNfsClientExecute(r ApiCteraGatewayOpenapiApiSharesRemoveTrustedNfsClientRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesApiService.CteraGatewayOpenapiApiSharesRemoveTrustedNfsClient")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{name}/trusted_nfs_clients"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.address != nil {
		localVarQueryParams.Add("address", parameterToString(*r.address, ""))
	}
	if r.netmask != nil {
		localVarQueryParams.Add("netmask", parameterToString(*r.netmask, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorMessage
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCteraGatewayOpenapiApiSharesSetAclRequest struct {
	ctx                     _context.Context
	ApiService              *SharesApiService
	name                    string
	shareAccessControlEntry *[]ShareAccessControlEntry
}

func (r ApiCteraGatewayOpenapiApiSharesSetAclRequest) ShareAccessControlEntry(shareAccessControlEntry []ShareAccessControlEntry) ApiCteraGatewayOpenapiApiSharesSetAclRequest {
	r.shareAccessControlEntry = &shareAccessControlEntry
	return r
}

func (r ApiCteraGatewayOpenapiApiSharesSetAclRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CteraGatewayOpenapiApiSharesSetAclExecute(r)
}

/*
 * CteraGatewayOpenapiApiSharesSetAcl Set the ACLs of the share (override the current ACL list)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name The name of the share
 * @return ApiCteraGatewayOpenapiApiSharesSetAclRequest
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesSetAcl(ctx _context.Context, name string) ApiCteraGatewayOpenapiApiSharesSetAclRequest {
	return ApiCteraGatewayOpenapiApiSharesSetAclRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

/*
 * Execute executes the request
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesSetAclExecute(r ApiCteraGatewayOpenapiApiSharesSetAclRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesApiService.CteraGatewayOpenapiApiSharesSetAcl")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{name}/acl"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.shareAccessControlEntry
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorMessage
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCteraGatewayOpenapiApiSharesSetScreenedFileTypesRequest struct {
	ctx         _context.Context
	ApiService  *SharesApiService
	name        string
	requestBody *[]string
}

func (r ApiCteraGatewayOpenapiApiSharesSetScreenedFileTypesRequest) RequestBody(requestBody []string) ApiCteraGatewayOpenapiApiSharesSetScreenedFileTypesRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiCteraGatewayOpenapiApiSharesSetScreenedFileTypesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CteraGatewayOpenapiApiSharesSetScreenedFileTypesExecute(r)
}

/*
 * CteraGatewayOpenapiApiSharesSetScreenedFileTypes Set the list of screened file types of the share (override the current list)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name The name of the share
 * @return ApiCteraGatewayOpenapiApiSharesSetScreenedFileTypesRequest
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesSetScreenedFileTypes(ctx _context.Context, name string) ApiCteraGatewayOpenapiApiSharesSetScreenedFileTypesRequest {
	return ApiCteraGatewayOpenapiApiSharesSetScreenedFileTypesRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

/*
 * Execute executes the request
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesSetScreenedFileTypesExecute(r ApiCteraGatewayOpenapiApiSharesSetScreenedFileTypesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesApiService.CteraGatewayOpenapiApiSharesSetScreenedFileTypes")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{name}/screened_file_types"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorMessage
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCteraGatewayOpenapiApiSharesSetTrustedNfsClientsRequest struct {
	ctx                     _context.Context
	ApiService              *SharesApiService
	name                    string
	nFSv3AccessControlEntry *[]NFSv3AccessControlEntry
}

func (r ApiCteraGatewayOpenapiApiSharesSetTrustedNfsClientsRequest) NFSv3AccessControlEntry(nFSv3AccessControlEntry []NFSv3AccessControlEntry) ApiCteraGatewayOpenapiApiSharesSetTrustedNfsClientsRequest {
	r.nFSv3AccessControlEntry = &nFSv3AccessControlEntry
	return r
}

func (r ApiCteraGatewayOpenapiApiSharesSetTrustedNfsClientsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CteraGatewayOpenapiApiSharesSetTrustedNfsClientsExecute(r)
}

/*
 * CteraGatewayOpenapiApiSharesSetTrustedNfsClients Set the Trusted NFS Clients of the share (override the current list)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name The name of the share
 * @return ApiCteraGatewayOpenapiApiSharesSetTrustedNfsClientsRequest
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesSetTrustedNfsClients(ctx _context.Context, name string) ApiCteraGatewayOpenapiApiSharesSetTrustedNfsClientsRequest {
	return ApiCteraGatewayOpenapiApiSharesSetTrustedNfsClientsRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

/*
 * Execute executes the request
 */
func (a *SharesApiService) CteraGatewayOpenapiApiSharesSetTrustedNfsClientsExecute(r ApiCteraGatewayOpenapiApiSharesSetTrustedNfsClientsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesApiService.CteraGatewayOpenapiApiSharesSetTrustedNfsClients")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{name}/trusted_nfs_clients"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nFSv3AccessControlEntry
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorMessage
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSharesGetRequest struct {
	ctx        _context.Context
	ApiService *SharesApiService
}

func (r ApiSharesGetRequest) Execute() ([]Share, *_nethttp.Response, error) {
	return r.ApiService.SharesGetExecute(r)
}

/*
 * SharesGet List all shares
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiSharesGetRequest
 */
func (a *SharesApiService) SharesGet(ctx _context.Context) ApiSharesGetRequest {
	return ApiSharesGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return []Share
 */
func (a *SharesApiService) SharesGetExecute(r ApiSharesGetRequest) ([]Share, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Share
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesApiService.SharesGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorMessage
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSharesNameDeleteRequest struct {
	ctx        _context.Context
	ApiService *SharesApiService
	name       string
}

func (r ApiSharesNameDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SharesNameDeleteExecute(r)
}

/*
 * SharesNameDelete Delete a share
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name The name of the share to delete
 * @return ApiSharesNameDeleteRequest
 */
func (a *SharesApiService) SharesNameDelete(ctx _context.Context, name string) ApiSharesNameDeleteRequest {
	return ApiSharesNameDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

/*
 * Execute executes the request
 */
func (a *SharesApiService) SharesNameDeleteExecute(r ApiSharesNameDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesApiService.SharesNameDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorMessage
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSharesNameGetRequest struct {
	ctx        _context.Context
	ApiService *SharesApiService
	name       string
}

func (r ApiSharesNameGetRequest) Execute() (Share, *_nethttp.Response, error) {
	return r.ApiService.SharesNameGetExecute(r)
}

/*
 * SharesNameGet Get the specified share
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name The name of the share to retrieve
 * @return ApiSharesNameGetRequest
 */
func (a *SharesApiService) SharesNameGet(ctx _context.Context, name string) ApiSharesNameGetRequest {
	return ApiSharesNameGetRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

/*
 * Execute executes the request
 * @return Share
 */
func (a *SharesApiService) SharesNameGetExecute(r ApiSharesNameGetRequest) (Share, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Share
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesApiService.SharesNameGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorMessage
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSharesNamePutRequest struct {
	ctx        _context.Context
	ApiService *SharesApiService
	name       string
	share      *Share
}

func (r ApiSharesNamePutRequest) Share(share Share) ApiSharesNamePutRequest {
	r.share = &share
	return r
}

func (r ApiSharesNamePutRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SharesNamePutExecute(r)
}

/*
 * SharesNamePut Update existing share
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name The name of the share to update
 * @return ApiSharesNamePutRequest
 */
func (a *SharesApiService) SharesNamePut(ctx _context.Context, name string) ApiSharesNamePutRequest {
	return ApiSharesNamePutRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

/*
 * Execute executes the request
 */
func (a *SharesApiService) SharesNamePutExecute(r ApiSharesNamePutRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesApiService.SharesNamePut")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.share
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorMessage
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSharesPostRequest struct {
	ctx        _context.Context
	ApiService *SharesApiService
	share      *Share
}

func (r ApiSharesPostRequest) Share(share Share) ApiSharesPostRequest {
	r.share = &share
	return r
}

func (r ApiSharesPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SharesPostExecute(r)
}

/*
 * SharesPost Create a new Share
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiSharesPostRequest
 */
func (a *SharesApiService) SharesPost(ctx _context.Context) ApiSharesPostRequest {
	return ApiSharesPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *SharesApiService) SharesPostExecute(r ApiSharesPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesApiService.SharesPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.share
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ErrorMessage
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
